# from aiogram import Bot, Dispatcher, types
# from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
# from aiogram.filters import Command
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import State, StatesGroup
# import asyncio
# import logging
#
# TOKEN = "8070637274:AAHT-UZ_xNSiXd5UMAWHXVo220X67--ZE_Q"
# ADMIN_ID = 191282752
# GROUP_ID = -1002469789522
#
# logging.basicConfig(level=logging.INFO)
# logger = logging.getLogger(__name__)
#
# bot = Bot(token=TOKEN)
# dp = Dispatcher()
#
# menu_buttons = [
#     [KeyboardButton(text="–£—á–µ–±–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã üóíÔ∏è")],
#     [KeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è ‚úçÔ∏è")],
#     [KeyboardButton(text="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Ä–µ–±—ë–Ω–∫–∞ üìà")]
# ]
# main_menu = ReplyKeyboardMarkup(keyboard=menu_buttons, resize_keyboard=True)
#
#
# class Form(StatesGroup):
#     waiting_for_message = State()
#
#
# @dp.message(Command('start'))
# async def start_handler(message: Message):
#     welcome_text = ("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ STEM-–±–æ—Ç! üè´\n"
#                     "üìö –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è–º –∏ —É—á–µ–Ω–∏–∫–∞–º.\n\n"
#                     "‚ú® *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
#                     "- üóíÔ∏è *–£—á–µ–±–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã*: –°–∫–∞—á–∞–π—Ç–µ —É—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã.\n"
#                     "- ‚úçÔ∏è *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è* –∏ üìà *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞*: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –∏ –≥—Ä—É–ø–ø–µ.")
#     await message.answer(welcome_text, reply_markup=main_menu, parse_mode="Markdown")
#
#
# @dp.message(lambda msg: msg.text == "–£—á–µ–±–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã üóíÔ∏è")
# async def choose_subject(message: Message):
#     markup = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="üìò STEM", callback_data="subject_STEM")],
#         [InlineKeyboardButton(text="üìó PSHE", callback_data="subject_PSHE")]
#     ])
#     await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=markup)
#
#
# @dp.callback_query(lambda c: c.data.startswith("subject_"))
# async def show_classes(callback: types.CallbackQuery):
#     subject = callback.data.split("_")[1]
#     if subject == "STEM":
#         classes = [f"{i} –∫–ª–∞—Å—Å STEM" for i in range(0, 10)]
#     else:
#         classes = [f"{i} –∫–ª–∞—Å—Å PSHE" for i in range(5, 10)]
#
#     buttons = [InlineKeyboardButton(text=cls, callback_data=f"class_{cls}") for cls in classes]
#     markup = InlineKeyboardMarkup(inline_keyboard=[[btn] for btn in buttons])
#     await callback.message.edit_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", reply_markup=markup)
#
#
# @dp.callback_query(lambda c: c.data.startswith("class_"))
# async def send_class_link(callback: types.CallbackQuery):
#     class_name = callback.data.split("_")[1]
#     links = {
#         '0 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/10AysxxzZsap6DDtdcFX-Ejk5VqtjohdQ/view?usp=sharing',
#         '1 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1y8d_0nrbZ6lB7QjJk88W0ADORDj4UlHY/view?usp=sharing',
#         '2 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1zB_i5RojmmcXgoNMVRoXlN7nyCZZn_Mn/view?usp=sharing',
#         '3 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1AS-ptHIb0nVVV_TXtzG8G4WDnGc-quii/view?usp=sharing',
#         '4 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/19uL5T08Wa2iBO7OiqAmcuPnzBLTrGLwS/view?usp=sharing',
#         '5 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1Nn6VBVTD39KHO0fmGxsdOFYujprBTPjz/view?usp=sharing',
#         '6 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1Ql7kjgRhCWpCcwVHNmPNKvffi3kcxMq1/view?usp=sharing',
#         '7 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1hFNrXaqZQwjOYfudTuaJnVnTVUCDeJzq/view?usp=sharing',
#         '8 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/18rO275lgM0x9qrjIBDk1XiBt48-0Sfx4/view?usp=sharing',
#         '9 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1tVF4eQLomy85sorfGHsLuCfLToRiVClI/view?usp=sharing',
#         '5 –∫–ª–∞—Å—Å PSHE': 'https://drive.google.com/file/d/1BVKMhqEbgaytH1He7xE63t84kahVV_gm/view?usp=sharing',
#         '6 –∫–ª–∞—Å—Å PSHE': 'https://drive.google.com/file/d/1BNI4OJUdyhSNw9AVG4qrlRr0usQixGO9/view?usp=sharing',
#         '7 –∫–ª–∞—Å—Å PSHE': 'https://drive.google.com/file/d/1FX04ezKVxZDplSRoN0IGhOtM3et0c8-M/view?usp=drive_link',
#         '8 –∫–ª–∞—Å—Å PSHE': 'https://drive.google.com/file/d/174OHI_zwc30bvABnVcPROu-HEhXx7Q4X/view?usp=drive_link',
#         '9 –∫–ª–∞—Å—Å PSHE': 'https://drive.google.com/file/d/1U20ERIIS8dbYJoA0gjDuyPNsTT7Pm2Vt/view?usp=sharing'
#     }
#     link = links.get(class_name, "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
#     await callback.message.answer(f"üì• {class_name}: {link}")
#
#
# async def main():
#     await dp.start_polling(bot)
#
#
# if __name__ == "__main__":
#     asyncio.run(main())
# from aiogram import Bot, Dispatcher, types
# from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
# from aiogram.filters import Command
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import State, StatesGroup
# import asyncio
# import logging

# TOKEN = "8070637274:AAHT-UZ_xNSiXd5UMAWHXVo220X67--ZE_Q"
# ADMIN_ID = 191282752
# GROUP_ID = -1002469789522
#
# logging.basicConfig(level=logging.INFO)
# logger = logging.getLogger(__name__)
#
# bot = Bot(token=TOKEN)
# dp = Dispatcher()
#
# menu_buttons = [
#     [KeyboardButton(text="–£—á–µ–±–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã üóíÔ∏è")],
#     [KeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è ‚úçÔ∏è")],
#     [KeyboardButton(text="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Ä–µ–±—ë–Ω–∫–∞ üìà")]
# ]
# main_menu = ReplyKeyboardMarkup(keyboard=menu_buttons, resize_keyboard=True)
#
#
# class Form(StatesGroup):
#     waiting_for_message = State()
#
#
# @dp.message(Command('start'))
# async def start_handler(message: Message):
#     welcome_text = ("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ STEM-–±–æ—Ç! üè´\n"
#                     "üìö –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è–º –∏ —É—á–µ–Ω–∏–∫–∞–º.\n\n"
#                     "‚ú® *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
#                     "- üóíÔ∏è *–£—á–µ–±–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã*: –°–∫–∞—á–∞–π—Ç–µ —É—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã.\n"
#                     "- ‚úçÔ∏è *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è* –∏ üìà *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞*: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –∏ –≥—Ä—É–ø–ø–µ.")
#     await message.answer(welcome_text, reply_markup=main_menu, parse_mode="Markdown")
#
#
# @dp.message(lambda msg: msg.text == "–£—á–µ–±–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã üóíÔ∏è")
# async def choose_subject(message: Message):
#     markup = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="üìò STEM", callback_data="subject_STEM")],
#         [InlineKeyboardButton(text="üìó PSHE", callback_data="subject_PSHE")]
#     ])
#     await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=markup)
#
#
# @dp.message(lambda msg: msg.text == "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è ‚úçÔ∏è" or msg.text == "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Ä–µ–±—ë–Ω–∫–∞ üìà")
# async def forward_message(message: Message):
#     try:
#         forward_text = f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name} (@{message.from_user.username}):\n\n{message.text}"
#         await bot.send_message(GROUP_ID, forward_text)
#         await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
#         await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
#
#
# @dp.callback_query(lambda c: c.data.startswith("subject_"))
# async def show_classes(callback: types.CallbackQuery):
#     subject = callback.data.split("_")[1]
#     if subject == "STEM":
#         classes = [f"{i} –∫–ª–∞—Å—Å STEM" for i in range(0, 10)]
#     else:
#         classes = [f"{i} –∫–ª–∞—Å—Å PSHE" for i in range(5, 10)]
#
#     buttons = [InlineKeyboardButton(text=cls, callback_data=f"class_{cls}") for cls in classes]
#     markup = InlineKeyboardMarkup(inline_keyboard=[[btn] for btn in buttons])
#     await callback.message.edit_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", reply_markup=markup)
#
#
# @dp.callback_query(lambda c: c.data.startswith("class_"))
# async def send_class_link(callback: types.CallbackQuery):
#     class_name = callback.data.split("_")[1]
#     links = {
#         '0 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/10AysxxzZsap6DDtdcFX-Ejk5VqtjohdQ/view?usp=sharing',
#         '1 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1y8d_0nrbZ6lB7QjJk88W0ADORDj4UlHY/view?usp=sharing',
#         '2 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1zB_i5RojmmcXgoNMVRoXlN7nyCZZn_Mn/view?usp=sharing',
#         '3 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1AS-ptHIb0nVVV_TXtzG8G4WDnGc-quii/view?usp=sharing',
#         '4 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/19uL5T08Wa2iBO7OiqAmcuPnzBLTrGLwS/view?usp=sharing',
#         '5 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1Nn6VBVTD39KHO0fmGxsdOFYujprBTPjz/view?usp=sharing',
#         '6 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1Ql7kjgRhCWpCcwVHNmPNKvffi3kcxMq1/view?usp=sharing',
#         '7 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1hFNrXaqZQwjOYfudTuaJnVnTVUCDeJzq/view?usp=sharing',
#         '8 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/18rO275lgM0x9qrjIBDk1XiBt48-0Sfx4/view?usp=sharing',
#         '9 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1tVF4eQLomy85sorfGHsLuCfLToRiVClI/view?usp=sharing',
#         '5 –∫–ª–∞—Å—Å PSHE': 'https://drive.google.com/file/d/1BVKMhqEbgaytH1He7xE63t84kahVV_gm/view?usp=sharing',
#         '6 –∫–ª–∞—Å—Å PSHE': 'https://drive.google.com/file/d/1BNI4OJUdyhSNw9AVG4qrlRr0usQixGO9/view?usp=sharing',
#         '7 –∫–ª–∞—Å—Å PSHE': 'https://drive.google.com/file/d/1FX04ezKVxZDplSRoN0IGhOtM3et0c8-M/view?usp=drive_link',
#         '8 –∫–ª–∞—Å—Å PSHE': 'https://drive.google.com/file/d/174OHI_zwc30bvABnVcPROu-HEhXx7Q4X/view?usp=drive_link',
#         '9 –∫–ª–∞—Å—Å PSHE': 'https://drive.google.com/file/d/1U20ERIIS8dbYJoA0gjDuyPNsTT7Pm2Vt/view?usp=sharing'
#     }
#     link = links.get(class_name, "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
#     await callback.message.answer(f"üì• {class_name}: {link}")
#
#
# async def main():
#     await dp.start_polling(bot)


# if __name__ == "__main__":
#     asyncio.run(main())

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
import logging

TOKEN = "8070637274:AAHT-UZ_xNSiXd5UMAWHXVo220X67--ZE_Q"
ADMIN_ID = 191282752
GROUP_ID = -1002469789522

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()

menu_buttons = [
    [KeyboardButton(text="–£—á–µ–±–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã üóíÔ∏è")],
    [KeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è ‚úçÔ∏è")],
    [KeyboardButton(text="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Ä–µ–±—ë–Ω–∫–∞ üìà")]
]
main_menu = ReplyKeyboardMarkup(keyboard=menu_buttons, resize_keyboard=True)


class Form(StatesGroup):
    waiting_for_message = State()


@dp.message(Command('start'))
async def start_handler(message: Message):
    welcome_text = ("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ STEM-–±–æ—Ç! üè´\n"
                    "üìö –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è–º –∏ —É—á–µ–Ω–∏–∫–∞–º.\n\n"
                    "‚ú® *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
                    "- üóíÔ∏è *–£—á–µ–±–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã*: –°–∫–∞—á–∞–π—Ç–µ —É—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã.\n"
                    "- ‚úçÔ∏è *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è* –∏ üìà *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞*: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –∏ –≥—Ä—É–ø–ø–µ.")
    await message.answer(welcome_text, reply_markup=main_menu, parse_mode="Markdown")


@dp.message(lambda msg: msg.text == "–£—á–µ–±–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã üóíÔ∏è")
async def choose_subject(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìò STEM", callback_data="subject_STEM")],
        [InlineKeyboardButton(text="üìó PSHE", callback_data="subject_PSHE")]
    ])
    await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=markup)


@dp.message(lambda msg: msg.text in ["–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è ‚úçÔ∏è", "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Ä–µ–±—ë–Ω–∫–∞ üìà"])
async def request_message(message: Message, state: FSMContext):
    await state.set_state(Form.waiting_for_message)
    await message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")


@dp.message(Form.waiting_for_message)
async def forward_user_message(message: Message, state: FSMContext):
    try:
        await bot.send_message(GROUP_ID,
                               f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name} (@{message.from_user.username}):\n\n{message.text}")
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    finally:
        await state.clear()


@dp.callback_query(lambda c: c.data.startswith("subject_"))
async def show_classes(callback: types.CallbackQuery):
    subject = callback.data.split("_")[1]
    if subject == "STEM":
        classes = [f"{i} –∫–ª–∞—Å—Å STEM " for i in range(0, 10)]
    else:
        classes = [f"{i} –∫–ª–∞—Å—Å PSHE" for i in range(5, 10)]

    buttons = [InlineKeyboardButton(text=cls, callback_data=f"class_{cls}") for cls in classes]
    markup = InlineKeyboardMarkup(inline_keyboard=[[btn] for btn in buttons])
    await callback.message.edit_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", reply_markup=markup)


@dp.callback_query(lambda c: c.data.startswith("class_"))
async def send_class_link(callback: types.CallbackQuery):
    class_name = callback.data.split("_")[1]
    links = {
            '0 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/10AysxxzZsap6DDtdcFX-Ejk5VqtjohdQ/view?usp=sharing',
            '1 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1y8d_0nrbZ6lB7QjJk88W0ADORDj4UlHY/view?usp=sharing',
            '2 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1zB_i5RojmmcXgoNMVRoXlN7nyCZZn_Mn/view?usp=sharing',
            '3 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1AS-ptHIb0nVVV_TXtzG8G4WDnGc-quii/view?usp=sharing',
            '4 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/19uL5T08Wa2iBO7OiqAmcuPnzBLTrGLwS/view?usp=sharing',
            '5 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1Nn6VBVTD39KHO0fmGxsdOFYujprBTPjz/view?usp=sharing',
            '6 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1Ql7kjgRhCWpCcwVHNmPNKvffi3kcxMq1/view?usp=sharing',
            '7 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1hFNrXaqZQwjOYfudTuaJnVnTVUCDeJzq/view?usp=sharing',
            '8 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/18rO275lgM0x9qrjIBDk1XiBt48-0Sfx4/view?usp=sharing',
            '9 –∫–ª–∞—Å—Å STEM': 'https://drive.google.com/file/d/1tVF4eQLomy85sorfGHsLuCfLToRiVClI/view?usp=sharing',
            '5 –∫–ª–∞—Å—Å PSHE': 'https://drive.google.com/file/d/1BVKMhqEbgaytH1He7xE63t84kahVV_gm/view?usp=sharing',
            '6 –∫–ª–∞—Å—Å PSHE': 'https://drive.google.com/file/d/1BNI4OJUdyhSNw9AVG4qrlRr0usQixGO9/view?usp=sharing',
            '7 –∫–ª–∞—Å—Å PSHE': 'https://drive.google.com/file/d/1FX04ezKVxZDplSRoN0IGhOtM3et0c8-M/view?usp=drive_link',
            '8 –∫–ª–∞—Å—Å PSHE': 'https://drive.google.com/file/d/174OHI_zwc30bvABnVcPROu-HEhXx7Q4X/view?usp=drive_link',
            '9 –∫–ª–∞—Å—Å PSHE': 'https://drive.google.com/file/d/1U20ERIIS8dbYJoA0gjDuyPNsTT7Pm2Vt/view?usp=sharing'
        }
    link = links.get(class_name, "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await callback.message.answer(f"üì• {class_name}: {link}")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())